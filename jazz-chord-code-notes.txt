11/19/23
	We have the nice beginnings of an effective chord practice app for zig zag chords.

	Features to add:
		A Session
		Randomly display a key that applies to each iteration or the Session as a whole.
		Display the results of a session at the end of a session.
		Write out a log of all sessions to a file.
		A sorting option, to display the results sorted by time (longest to shortest)
		How could I ask/answer some useful questions about this exercise?
			? Which CP takes the longest? 
			? Which Key takes the longest?
			? Which CP takes the shortest?
			? For a given CP and Key how has elapsed time changed over time.
				We'd need to record a timestamp for each iteration.

			


	We want to add the idea of a session. My prompts:
		I would like to add the concept of a 'session' to this program. A 'session' is defined as some number of iterations through the program. E.g., iterating through the Start/Stop cycle 10 times.

		Ok, now I want to be able to begin and end a session with a button click. This should be a new button, with the label "Begin" displayed before a session starts, and "End" after the session starts. The button should be placed above the Start/Stop button.

	We added vars to keep track of number of iterations through a session and the count of sessions.
	We increment this in stopTimer(), but I'm not sure if that's the right place to do it. 
		Perhaps that should happen in the calling function, handleButtonClick()?
			Let's try that.

11/20/23
	We've fallen into the age-old trap of losing track of the control flow through the app.
	Let's get serious about debugging in VSCode and document the control flow.

	CLicking on the "Begin" button calls handleSessionButtonClick()
		Inside we check whether we're starting or ending the session. If starting:
			toggle isSessionRunning to "True"
			enable the "Start" button

	Then...we wait. 
	Let's try toggling off the Session button, just to make sure that's working.
	Again we call handleSessionButtonClick()
		Yep, that all works. 

	Let's start a new session and then Start the timer.
	This calls handleStartButtonClick()
		Hmmm, once we hit startTimer() it drops us to the bottom of the function. WHy is that?
			Stepping over takes us to updateElapsedTime()
				updateElapsedTime() is called by timerID = setInterval(). Specifically:
					timerId = setInterval(updateElapsedTime, 1000);
						#LEARN setInterval() method. 

			So basically we just loop through updateElapsedTime() until another event happens, like...clicking the "Stop" button.

		That calls handleButtonStartClick()
			Check the state of the button's content. If "Stop" then set it to "Start"
			Call stopTimer()
			Get the currentTime
			Subtract startTime from currentTime to get elapsedTime
			Display elapsedTime.
			We increment sessionCount...WHY?????????
				That doesn't make any sense. Seems like we'd do that when the user clicked the "End" button for the session.
			Let's click that button and follow the flow.	

			Calls handleSessionButtonClick()

		#BUG When pressing the spacebar, we still call handleStartButtonClick(), despite the session not running. We need a guardrail such that keydown events are only processed if a session is running.

		How do we do that?
			We could put a check inside the if(event.keyCode === 32) statement to see if the session is running. 

			We could move the addEventListener function inside another function that's only called with the "Begin" button is pressed. That funciton is handleSessionButtonCLick().
				We'd need to handle both cases where we add and remove the eventListener.

			That seems cleaner; let's try that.





Starting work on a new feature after merging a Pull Request (PR) into your main branch involves a few key steps in Git to ensure a smooth and organized workflow. Here's a general process you can follow:

1. Update Your Local Main Branch
First, make sure your local main branch is up-to-date with the latest changes from the remote repository. This includes the changes you just merged through the PR.

Switch to the Main Branch:

bash
Copy code
git checkout main
Pull the Latest Changes:

bash
Copy code
git pull origin main
2. Create a New Feature Branch
For each new feature, it's good practice to create a separate branch. This keeps your work organized and isolated from the main branch, which should remain stable.

Create and Switch to a New Branch:
Replace feature-name with a descriptive name for your new feature.
bash
Copy code
git checkout -b feature-name
3. Start Working on the Feature
Now that you have a dedicated branch, you can start adding new code or making changes related to your feature.

Make Changes: Work on your feature as needed.
Commit Changes Regularly: As you make progress, commit your changes with descriptive messages.
bash
Copy code
git add .
git commit -m "Add a descriptive commit message"
4. Keep Your Feature Branch Updated
If you're working on a long-term feature, regularly update your branch with changes from the main branch to avoid large merge conflicts later.

Merge or Rebase with Main:
bash
Copy code
git pull origin main  # Merge
or
bash
Copy code
git rebase main  # Rebase
5. Push Your Feature Branch
Once you have made significant progress or completed the feature, push the branch to the remote repository.

Push to Remote:
bash
Copy code
git push origin feature-name
6. Create a Pull Request
When your feature is ready for review or integration into the main branch, open a new Pull Request from your feature branch.

Open PR on GitHub: Go to your repository on GitHub and create a new Pull Request from your feature branch to the main branch. Describe the changes and any relevant information for reviewers.
7. Respond to Feedback and Merge
After creating the PR, respond to any feedback or code reviews. Once everything is approved and any automated checks pass, you can merge the PR into the main branch.

Tips for Working on Features
Small, Focused Commits: Make small, frequent commits that encapsulate specific changes or improvements. This makes it easier to understand the history and to isolate changes if something goes wrong.
Document Your Changes: Write clear commit messages and PR descriptions to explain your changes and the rationale behind them.
Test Thoroughly: Before opening a PR, thoroughly test your changes to ensure they work as expected and do not break existing functionality.
By following these steps, you can maintain a clean and efficient workflow, making it easier to manage and collaborate on your project.